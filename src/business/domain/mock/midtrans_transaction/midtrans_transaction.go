// Code generated by MockGen. DO NOT EDIT.
// Source: src/business/domain/midtrans_transaction/midtrans_transaction.go

// Package mock_midtranstransaction is a generated GoMock package.
package mock_midtranstransaction

import (
	entity "go-clean/src/business/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInterface) Create(midtransTransaction entity.MidtransTransaction) (entity.MidtransTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", midtransTransaction)
	ret0, _ := ret[0].(entity.MidtransTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockInterfaceMockRecorder) Create(midtransTransaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInterface)(nil).Create), midtransTransaction)
}

// Get mocks base method.
func (m *MockInterface) Get(param entity.MidtransTransactionParam) (entity.MidtransTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", param)
	ret0, _ := ret[0].(entity.MidtransTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInterfaceMockRecorder) Get(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInterface)(nil).Get), param)
}

// Update mocks base method.
func (m *MockInterface) Update(selectParam entity.MidtransTransactionParam, updateParam entity.UpdateMidtransTransactionParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", selectParam, updateParam)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockInterfaceMockRecorder) Update(selectParam, updateParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockInterface)(nil).Update), selectParam, updateParam)
}
