// Code generated by MockGen. DO NOT EDIT.
// Source: src/business/domain/midtrans/midtrans.go

// Package mock_midtrans is a generated GoMock package.
package mock_midtrans

import (
	midtrans "go-clean/src/lib/midtrans"
	reflect "reflect"

	coreapi "github.com/midtrans/midtrans-go/coreapi"
	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInterface) Create(params midtrans.CreateOrderParam) (*coreapi.ChargeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", params)
	ret0, _ := ret[0].(*coreapi.ChargeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockInterfaceMockRecorder) Create(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInterface)(nil).Create), params)
}

// HandleNotification mocks base method.
func (m *MockInterface) HandleNotification(id string) (*coreapi.TransactionStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleNotification", id)
	ret0, _ := ret[0].(*coreapi.TransactionStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleNotification indicates an expected call of HandleNotification.
func (mr *MockInterfaceMockRecorder) HandleNotification(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleNotification", reflect.TypeOf((*MockInterface)(nil).HandleNotification), id)
}
