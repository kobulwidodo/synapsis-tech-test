// Code generated by MockGen. DO NOT EDIT.
// Source: src/lib/auth/auth.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	context "context"
	auth "go-clean/src/lib/auth"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// GenerateGuestToken mocks base method.
func (m *MockInterface) GenerateGuestToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateGuestToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateGuestToken indicates an expected call of GenerateGuestToken.
func (mr *MockInterfaceMockRecorder) GenerateGuestToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateGuestToken", reflect.TypeOf((*MockInterface)(nil).GenerateGuestToken))
}

// GenerateToken mocks base method.
func (m *MockInterface) GenerateToken(user auth.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockInterfaceMockRecorder) GenerateToken(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockInterface)(nil).GenerateToken), user)
}

// GetUserAuthInfo mocks base method.
func (m *MockInterface) GetUserAuthInfo(ctx context.Context) (auth.UserAuthInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAuthInfo", ctx)
	ret0, _ := ret[0].(auth.UserAuthInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAuthInfo indicates an expected call of GetUserAuthInfo.
func (mr *MockInterfaceMockRecorder) GetUserAuthInfo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAuthInfo", reflect.TypeOf((*MockInterface)(nil).GetUserAuthInfo), ctx)
}

// SetUserAuthInfo mocks base method.
func (m *MockInterface) SetUserAuthInfo(ctx context.Context, user auth.User, token string) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserAuthInfo", ctx, user, token)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// SetUserAuthInfo indicates an expected call of SetUserAuthInfo.
func (mr *MockInterfaceMockRecorder) SetUserAuthInfo(ctx, user, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserAuthInfo", reflect.TypeOf((*MockInterface)(nil).SetUserAuthInfo), ctx, user, token)
}
